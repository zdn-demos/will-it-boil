{"ast":null,"code":"import _classCallCheck from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/zachnusbaum/Downloads/react-temp-convert/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/zachnusbaum/Downloads/react-temp-convert/src/components/calculator.js\";\nimport React from 'react';\nimport { BoilingVerdict } from './boiling-verdict';\nimport { TemperatureInput } from './temperature-input';\nimport { tryConvert, toCelsius, toFahrenheit } from '../utils/converters';\nexport var Calculator =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calculator, _React$Component);\n\n  function Calculator(props) {\n    var _this;\n\n    _classCallCheck(this, Calculator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calculator).call(this, props));\n    _this.handleCelsiusChange = _this.handleCelsiusChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFahrenheitChange = _this.handleFahrenheitChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n    return _this;\n  }\n\n  _createClass(Calculator, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState({\n        temperature: e.target.value\n      });\n    }\n  }, {\n    key: \"handleCelsiusChange\",\n    value: function handleCelsiusChange(temperature) {\n      this.setState({\n        scale: 'c',\n        temperature: temperature\n      });\n    }\n  }, {\n    key: \"handleFahrenheitChange\",\n    value: function handleFahrenheitChange(temperature) {\n      this.setState({\n        scale: 'f',\n        temperature: temperature\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scale = this.state.scale;\n      var temperature = this.state.temperature;\n      var celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n      var fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(BoilingVerdict, {\n        celsius: parseFloat(celsius),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Calculator;\n}(React.Component);","map":{"version":3,"sources":["/Users/zachnusbaum/Downloads/react-temp-convert/src/components/calculator.js"],"names":["React","BoilingVerdict","TemperatureInput","tryConvert","toCelsius","toFahrenheit","Calculator","props","handleCelsiusChange","bind","handleFahrenheitChange","state","temperature","scale","e","setState","target","value","celsius","fahrenheit","parseFloat","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,qBAApD;AAEA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AACE,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,uDAA3B;AACA,UAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BD,IAA5B,uDAA9B;AACA,UAAKE,KAAL,GAAa;AAAEC,MAAAA,WAAW,EAAE,EAAf;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAb;AAJiB;AAKlB;;AANH;AAAA;AAAA,iCAQeC,CARf,EAQkB;AACd,WAAKC,QAAL,CAAc;AAAEH,QAAAA,WAAW,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAxB,OAAd;AACD;AAVH;AAAA;AAAA,wCAYsBL,WAZtB,EAYmC;AAC/B,WAAKG,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,GAAT;AAAcD,QAAAA,WAAW,EAAXA;AAAd,OAAd;AACD;AAdH;AAAA;AAAA,2CAgByBA,WAhBzB,EAgBsC;AAClC,WAAKG,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,GAAT;AAAcD,QAAAA,WAAW,EAAXA;AAAd,OAAd;AACD;AAlBH;AAAA;AAAA,6BAoBW;AACP,UAAMC,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAzB;AACA,UAAMD,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AACA,UAAMM,OAAO,GAAGL,KAAK,KAAK,GAAV,GAAgBV,UAAU,CAACS,WAAD,EAAcR,SAAd,CAA1B,GAAqDQ,WAArE;AACA,UAAMO,UAAU,GAAGN,KAAK,KAAK,GAAV,GAAgBV,UAAU,CAACS,WAAD,EAAcP,YAAd,CAA1B,GAAwDO,WAA3E;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,GAAxB;AAA4B,QAAA,WAAW,EAAEM,OAAzC;AAAkD,QAAA,mBAAmB,EAAE,KAAKV,mBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,GAAxB;AAA4B,QAAA,WAAW,EAAEW,UAAzC;AAAqD,QAAA,mBAAmB,EAAE,KAAKT,sBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,cAAD;AACE,QAAA,OAAO,EAAEU,UAAU,CAACF,OAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAQD;AAjCH;;AAAA;AAAA,EAAgClB,KAAK,CAACqB,SAAtC","sourcesContent":["import React from 'react';\nimport { BoilingVerdict } from './boiling-verdict';\nimport { TemperatureInput } from './temperature-input';\n\nimport { tryConvert, toCelsius, toFahrenheit } from '../utils/converters';\n\nexport class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = { temperature: '', scale: 'c' }\n  }\n\n  handleChange(e) {\n    this.setState({ temperature: e.target.value });\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({ scale: 'c', temperature });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({ scale: 'f', temperature });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}